trigger:
  branches:
    include:
     - '*'

pool: local #Locally run agent

#Install Dotnet SDK to Agent
#Restore Dotnet nuget packages
#Build Dotnet solution
#Build Docker Image
#Pull Trivy from Dockerhub and Scan built Docker Image with it
#Authenticate to Amazon ECR
#Tag Docker Image
#Upload Tagged Docker Image to Amazon ECR

variables:
  AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
  AWS_SECRET_ACCESS_KEY: $(awsSecretKey)
  AWS_DEFAULT_REGION: $(awsRegion)
  ECR_REPO_URL: $(awsEcrUri)

jobs:
  - job: Build
    displayName: 'Restore & Build'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
      displayName: 'Install .NET SDK'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '*.sln'
      displayName: 'Restore Packages'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '*.sln'
        arguments: '--configuration Release'
      displayName: 'Build Solution'

    - script: |
        docker build -f SampleDockerCRUDApp/Dockerfile -t sampledockercrudapp:$(Build.BuildNumber) .
      displayName: 'Build Docker Image'

  - job: Trivy
    displayName: 'Tests'
    steps:
    - script: |
        docker pull aquasec/trivy:latest
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest --quiet image sampledockercrudapp:$(Build.BuildNumber)
      displayName: 'Pull Trivy from Docker and Scan the Dockerfile'

  - job: Deploy
    displayName: 'Deploy Docker Image to AWS'
    steps:
    - script: |
        aws ecr get-login-password --region $(AWS_DEFAULT_REGION) | docker login --username AWS --password-stdin $(ECR_REPO_URL)
      displayName: 'Login to Amazon ECR'

    - script: |
        docker tag sampledockercrudapp:$(Build.BuildNumber) $(ECR_REPO_URL):latest
      displayName: 'Tag Docker Image'

    - script: |
        docker push $(ECR_REPO_URL):latest
      displayName: 'Push Docker Image to ECR'
